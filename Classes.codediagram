{"id":-1,"name":"Onboarding diagram","userId":-1,"createdAt":"","updatedAt":"","content":{"items":[{"uid":"O1E6r0_Ye1","position":{"x":1890,"y":-1480},"sizes":{"width":1279.03125,"height":802},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"inc/","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Client.hpp"}]},{"type":"codeBlock","attrs":{"language":"cpp","wrapCode":true},"content":[{"type":"text","text":"#pragma once\n\n#include \"Webserv.hpp\"\n#include \"ParseHttp.hpp\"\n\nenum class ClientState\t{IDLE, HEADERS_RECEIVED, BODY_RECEIVED, COMPLETE, ERROR};\n\nclass Client\n{\n\tpublic:\n\t\tint\t\t\t\tfd;\n\t\tbool \t\t\tisComplete;\n\t\tbool \t\t\tdisconnect;\n\n\t\tClientState\t\tstate;\n\t\tHttpRequest     request;\n        httpResponse    response;\n\n\n\n\n\n\t\tClient() : fd(-1), expected_len(0), received_len(0), isComplete(false), header_received(false), body_received(false), body_start(0) {}\n\t\tClient(int _fd) : fd(_fd), expected_len(0), received_len(0), isComplete(false), header_received(false), body_received(false), body_start(0) {}\n\t\t~Client() {}\n\n\n\t\tvoid reset()\n\t\t{\n\t\t\trecv_buffer.clear();\n\t\t\theader_str.clear();\n\t\t\texpected_len = 0;\n\t\t\tbody_start = 0;\n\t\t\tdisconnect = false;\n\t\t\tstate = ClientState::IDLE;\n\t\t\trequest.reset();\n\t\t}\n};"}]}]},"nodeType":"block"},{"uid":"KjSw6otNGk","position":{"x":1770,"y":-2620},"sizes":{"width":909.03125,"height":627},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"inc/","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"ServerLoop.hpp"}]},{"type":"codeBlock","attrs":{"language":"cpp","wrapCode":true},"content":[{"type":"text","text":"#pragma once\n\n#include \"Webserv.hpp\"\n#include \"ParseConfig.hpp\"\n#include \"ParseHttp.hpp\"\n#include \"httpResponse.hpp\"\n#include \"Client.hpp\"\n\nclass Server\n{\n\tprivate:\n\t\n\tpublic:\n\t\tServer();\n\t\t~Server();\n\t\tvoid startServer(ParseConfig parse);\n\t\tvoid serverSetup(std::vector<InitConfig> &servers);\n\t\tvoid parseHttp(std::vector<InitConfig> &servers, HttpRequest &request,  httpResponse &response);\n\n        we create an object ----> ServerSocket serversocket;\n\t\tstd::vector<pollfd> initPollfd(std::vector<InitConfig> &servers);\n\n\n\t\tvoid\tremoveFd(std::vector<pollfd> &fds, size_t index);\n\t\tbool\treceiveReq(int client_fd, std::unordered_map<int, Client> &clients);\n\n\t\tbool\tsendAll(int fd, const char* buffer, size_t length);\n};"}]}]},"color":{"bgColor":"#ffffff","bgName":"white"},"nodeType":"block"},{"uid":"KFCGWjbIsH","position":{"x":1100,"y":-250},"sizes":{"width":920,"height":1589.5},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"inc/","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"HttpRequest.hpp"}]},{"type":"codeBlock","attrs":{"language":"cpp","wrapCode":true},"content":[{"type":"text","text":"#pragma once\n\n#include \"Webserv.hpp\"\n\nenum class Method {GET,POST,DELETE, INVALID};\nenum class Version {HTTP_1_0, HTTP_1_1, HTTP_2, INVALID};\nenum class ParseState {START_LINE, HEADERS, BODY, COMPLETE, ERROR};\nenum class ParseResult {COMPLETE, INCOMPLETE, ERROR};\n\n/*\nenum class ParseResult\t\t//? later i can improve it \n{\n    COMPLETE,\n    INCOMPLETE,\n    INVALIDSTARTLINE,\n    INVALIDHEADER,\n    BODYTOOLARGE,\n    INTERNALERROR\n};\n*/\n\nclass\tHttpRequest\n{\n\tprivate:\n\t\tMethod\t\t\t\t\t\t\t\t\t\t\t\tmethod;\n\t\tstd::string\t\t\t\t\t\t\t\t\t\t\tpath;\n\t\tVersion\t\t\t\t\t\t\t\t\t\t\t\tversion;\n\t\tstd::ofstream\t\t\t\t\t\t\t\t\t\tbodyFile;\n\t\tsize_t\t\t\t\t\t\t\t\t\t\t\t\tbodySize;\n\t\tstd::string\t\t\t\t\t\t\t\t\t\t\tbodyFilePath;\n\t\tstd::unordered_map<std::string, std::string> \t\theaders;\n\t\tParseState\t\t\t\t\t\t\t\t\t\t\tparseState;\n\t\tParseResult\t\t\t\t\t\t\t\t\t\t\tparseResult;\n\t\t\n\n\tpublic:\n\t\tHttpRequest();\n\t\tHttpRequest(const HttpRequest &copy);\n\t\tHttpRequest &operator=(const HttpRequest &copy);\n\t\t~HttpRequest();\n\n\t\tvoid setMethod(Method method);\n\t\tvoid setPath(const std::string &path);\n\t\tvoid setVersion(Version version);\n\t\tvoid setBody(const std::string &filePath);\n\t\tvoid setHeaders(const std::unordered_map<std::string, std::string> &headers);\n\n\t\tstd::string\tgetMethod() const;\n\t\tstd::string\tgetPath() const;\n\t\tstd::string getVersion() const;\n\t\tsize_t\t\tgetBodySize() const;\n        std::string\tgetBodyFilePath() const;\n\t\tstd::unordered_map<std::string, std::string> getHeaders() const;\n\t\t\n\t\t// From String to enum \n\t\tMethod\t\ttoMethodEnum(const std::string &methodStr);\n\t\tVersion\t\ttoVersionEnum(const std::string &versionStr);\n\t\t\n\t\t// Parsing\n\t\tParseResult\tparseRequestPartial(std::string &buffer);\n\t\tbool parseRequestFromCompleteBuffer(const std::string &rawRequest);\n\t\tbool parseStartLine(const std::string &line);\n\t\tbool parseHeaders(const std::string &line);\n\t\t\n\t\t// validation\n\t\tbool isValidMethod() const;\n\t\tbool isValidVersion() const;\n\t\tbool isValidPath();\n\t\t\n\t\tstd::string receiveRequest(int client_fd);\n\t\tssize_t\treceive(int client_fd, std::string &buffer);\n\t\tvoid log_headers();\n\t\tvoid log_first_line();\n\n\t\tstd::string readFile(const std::string& filePath) const;\n\t\tstd::string buildResponse();\n\n\t\tvoid reset();\n\n\n\t};\n\nstd::ostream &operator<<(std::ostream &os, const HttpRequest &request);"}]}]},"nodeType":"block"},{"uid":"RLmoZTyF8W","position":{"x":3030,"y":-90},"sizes":{"width":890,"height":837},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"inc/","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"HttpResponse.hpp"}]},{"type":"codeBlock","attrs":{"language":"cpp","wrapCode":true},"content":[{"type":"text","text":"#ifndef HTTPRESPONSE_HPP\n# define HTTPRESPONSE_HPP\n\n#include <string>\n#include <map>\n#include <sstream>\n#include \"../inc/ParseHttp.hpp\"\n\nclass httpResponse\n{\nprivate:\n\tstd::string statusCode; // e.g., \"200 OK\"\n\tstd::string contentType; // e.g., \"text/html\"\n\tstd::string body;        // The response body content\n\tstd::map<std::string, std::string> headers;\n\npublic:\n\t// ========== OCF ==========\n\thttpResponse();\n\thttpResponse(const std::string &statusCode, const std::string &contentType, const std::string &body);\n\t~httpResponse();\n\n\t// ========== Setters ==========\n\tvoid setStatusCode(const std::string &statusCode);\n\tvoid setContentType(const std::string &contentType);\n\tvoid setBody(const std::string &body);\n\tvoid addHeader(const std::string &key, const std::string &value);\n\n\t// Build the final response string\n\tstd::string buildResponse(const HttpRequest& request) const;\n\n\t// ====== Getters ==========\n\tstd::string getStatusCode() const;\n\tstd::string getContentType() const;\n\tstd::string getBody() const;\n\tstd::map<std::string, std::string> getHeaders() const;\n};\n\n#endif // !HTTPRESPONSE_HPP\n"}]}]},"nodeType":"block"},{"uid":"Fs3O7wCYOx","position":{"x":1950,"y":-3790},"sizes":{"width":490,"height":819.5},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"inc/","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Webserv.hpp"}]},{"type":"codeBlock","attrs":{"language":"cpp","wrapCode":true},"content":[{"type":"text","text":"#pragma once\n\n#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <netinet/in.h>\n#include <map>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <set>\n#include <arpa/inet.h>\n\n#include <unordered_map>\n#include <poll.h>\n#include <fcntl.h>\n\n#define PORT 8080\n#define BACKLOG 10\n\n\nclass ConfigError: public std::exception\n{\n\tprivate:\n\t\tstd::string _msg;\n\tpublic:\n\t\tConfigError(const std::string &msg) throw()\n\t\t\t:_msg(msg) {}\n\t\t\n\t\tvirtual ~ConfigError() throw () {};\n\n\t\tvirtual const char *what() const throw()\n\t\t{\n\t\t\treturn _msg.c_str();\n\t\t}\n};"}]}]},"nodeType":"block"},{"uid":"dPRAteo8GI","position":{"x":2860,"y":-2590},"sizes":{"width":640,"height":665.5},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"heading","attrs":{"level":2},"content":[{"type":"text","text":"ServerSockets.hpp"}]},{"type":"heading","attrs":{"level":2}},{"type":"paragraph","content":[{"type":"text","text":"this is Nico class"}]},{"type":"codeBlock","attrs":{"language":null,"wrapCode":false},"content":[{"type":"text","text":"#ifndef SERVER_HPP\n#define SERVER_HPP\n\n#include <netinet/in.h>\n#include <map>\n#include \"Config.hpp\"\n\n#define LISTEN_BACKLOG 10 // Maximum number of connection requests in queue\n\nclass ServerSocket\n{\nprivate:\n\tint\t\t\t\t\t\t\tfd; // File descriptor of the server socket\n\tstruct sockaddr_in\t\t\tsockaddr;\n\t\n\tvoid\t\t\t\t\t\tsetupSocket(ServerBlock defaultServerBlock);\n\npublic:\n\tstd::vector<ServerBlock>\tserverBlocks;\n\t\n\tServerSocket(ServerBlock defaultServerBlock);\n\n\tint\t\t\t\t\t\t\tgetFd();\n};\n\n#endif"}]}]},"color":{"bgColor":"hsla(5, 100%, 88%, 1)","bgName":"red-l"},"nodeType":"block"},{"uid":"x5f1csaNaI","position":{"x":3850,"y":-2450},"sizes":{"width":770,"height":749.5},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"srcs/","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"ServerSockets.cpp"}]},{"type":"codeBlock","attrs":{"language":"cpp","wrapCode":true},"content":[{"type":"text","text":"void Server::serverSetup(std::vector<InitConfig> &servers)\n{\n\tstd::cout << \"servers being initialized...\" << std::endl;     //logger\n\n\tfor (size_t i = 0; i < servers.size(); i++)\n\t{\n\t\tbool duplicate = false;\n\n\t\tfor (size_t j = 0; j < i; j++)\n\t\t{\n\t\t\tif (servers[j].getHost() == servers[i].getHost() &&\n\t\t\t\tservers[j].getPort() == servers[i].getPort())\n\t\t\t{\n\t\t\t\tthrow ConfigError(\"Error: do not support virtual host!\");\n\t\t\t\tduplicate = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!duplicate)\n\t\t{\n\t\t\tif (!servers[i].createAndBindSocket())\n\t\t\t\tthrow ConfigError(\"Failed to setup server socket!\");\n\t\t}\n\t\t// std::cout << servers[0].getFd() << \" after socket creation\" << std::endl;\n\t\t// std::cout << \"Server created 'host: ... ', port: '...'\" << std::endl;     //logger\n\t\tstd::cout << \"Server socket created and bound successfully: \"\n          << \"Host: \" << servers[i].getHost()\n          << \", Port: \" << servers[i].getPort()\n          << \", Fd: \" << servers[i].getFd()\n          << std::endl;\n\t\tstd::cout << \"Server created 'host: ... ', port: '...'\" << std::endl;     //logger\n\t}\n}\n"}]}]},"nodeType":"block"},{"uid":"2PiN4vcQvV","position":{"x":4800,"y":-2530},"sizes":{"width":800,"height":959.5},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"srcs/","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"<we should change this function to other class>"}]},{"type":"codeBlock","attrs":{"language":"cpp","wrapCode":true},"content":[{"type":"text","text":"bool InitConfig::createAndBindSocket() \n{\n\tlisten_fd = socket(AF_INET, SOCK_STREAM, 0);\n\tif (listen_fd == -1)\n\t{\n\t\tstd::cout << \"Error: socket() failed\" << std::endl;         //logger\n\t\treturn (false);\n\t}\n\n\tint opt = 1;\n\tif (setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) == -1)\n\t{\n\t\tstd::cout << \"Error: setsocketopt() failed\" << std::endl;     //logger\n\t\tclose(listen_fd);\n\t\treturn (false);\n\t}\n\n\tmemset(&socket_address, 0, sizeof(socket_address));\n\tsocket_address.sin_family = AF_INET;\n\tsocket_address.sin_port = htons(port);\n\n\tif (host == \"0.0.0.0\")\n\t\tsocket_address.sin_addr.s_addr = INADDR_ANY;\n\telse\n\t\tsocket_address.sin_addr.s_addr = inet_addr(host.c_str());\n\t\n\tif (socket_address.sin_addr.s_addr == INADDR_NONE)\n\t{\n\t\tstd::cout << \"Error: invalid IP\" << std::endl;\n\t\tclose(listen_fd);\n\t\treturn (false);\n\t}\n\n\tif (bind(listen_fd, (struct sockaddr *) &socket_address, sizeof(socket_address)) == -1)\n\t{\n\t\tstd::cout << \"Error: bind() failed\" << std::endl;\n\t\tclose(listen_fd);\n\t\treturn (false);\n\t}\n\n\tif (listen(listen_fd, SOMAXCONN) == -1) {\n\t\tstd::cerr << \"listen() failed: \" << strerror(errno) << std::endl;\n\t\tclose(listen_fd);\n\t\treturn false;\n\t}\n\treturn (true);\n}"}]}]},"nodeType":"block"}],"configs":{"centerX":163.27325118571684,"centerY":664.2305385148483,"zoomLevel":0.12666829427083334},"arrowData":{"arrowsMap":{"arrow-point-bI0wBh3Ufk-bottom-point-PSPLIYKa9J-top":{"to":"point-PSPLIYKa9J-top","from":"point-bI0wBh3Ufk-bottom","label":"Normal Box","direction":"ft","selectable":true},"arrow-point-bI0wBh3Ufk-bottom-point-ytXK_ayIc1-top":{"to":"point-ytXK_ayIc1-top","from":"point-bI0wBh3Ufk-bottom","label":"Code Box","direction":"ft","selectable":true},"arrow-point-hyyRZE3E8u-right-point-6ZopTaEaDZ-left":{"to":"point-6ZopTaEaDZ-left","from":"point-hyyRZE3E8u-right","label":"call","direction":"ft","selectable":true}},"pointsMap":{"point-PSPLIYKa9J-top":{"x":805.9999797489683,"y":60,"id":"point-PSPLIYKa9J-top","direction":"top"},"point-ytXK_ayIc1-top":{"x":205.99999493724206,"y":60,"id":"point-ytXK_ayIc1-top","direction":"top"},"point-6ZopTaEaDZ-left":{"x":220,"y":605.9999898744841,"id":"point-6ZopTaEaDZ-left","direction":"left"},"point-hyyRZE3E8u-right":{"x":100,"y":606,"id":"point-hyyRZE3E8u-right","direction":"right"},"point-bI0wBh3Ufk-bottom":{"x":515.9999797489683,"y":-40,"id":"point-bI0wBh3Ufk-bottom","direction":"bottom"}},"edgesMap":{"edge-O1E6r0_Ye1-O1E6r0_Ye1-bottom-KFCGWjbIsH-KFCGWjbIsH-top":{"uid":"edge-O1E6r0_Ye1-O1E6r0_Ye1-bottom-KFCGWjbIsH-KFCGWjbIsH-top","fromNodeId":"O1E6r0_Ye1","fromHandleId":"O1E6r0_Ye1-bottom","toNodeId":"KFCGWjbIsH","toHandleId":"KFCGWjbIsH-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-O1E6r0_Ye1-O1E6r0_Ye1-bottom-RLmoZTyF8W-RLmoZTyF8W-top":{"uid":"edge-O1E6r0_Ye1-O1E6r0_Ye1-bottom-RLmoZTyF8W-RLmoZTyF8W-top","fromNodeId":"O1E6r0_Ye1","fromHandleId":"O1E6r0_Ye1-bottom","toNodeId":"RLmoZTyF8W","toHandleId":"RLmoZTyF8W-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-KjSw6otNGk-KjSw6otNGk-bottom-O1E6r0_Ye1-O1E6r0_Ye1-top":{"uid":"edge-KjSw6otNGk-KjSw6otNGk-bottom-O1E6r0_Ye1-O1E6r0_Ye1-top","fromNodeId":"KjSw6otNGk","fromHandleId":"KjSw6otNGk-bottom","toNodeId":"O1E6r0_Ye1","toHandleId":"O1E6r0_Ye1-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-Fs3O7wCYOx-Fs3O7wCYOx-bottom-KjSw6otNGk-KjSw6otNGk-top":{"uid":"edge-Fs3O7wCYOx-Fs3O7wCYOx-bottom-KjSw6otNGk-KjSw6otNGk-top","fromNodeId":"Fs3O7wCYOx","fromHandleId":"Fs3O7wCYOx-bottom","toNodeId":"KjSw6otNGk","toHandleId":"KjSw6otNGk-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-KjSw6otNGk-KjSw6otNGk-right-dPRAteo8GI-dPRAteo8GI-left":{"uid":"edge-KjSw6otNGk-KjSw6otNGk-right-dPRAteo8GI-dPRAteo8GI-left","fromNodeId":"KjSw6otNGk","fromHandleId":"KjSw6otNGk-right","toNodeId":"dPRAteo8GI","toHandleId":"dPRAteo8GI-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-dPRAteo8GI-dPRAteo8GI-right-x5f1csaNaI-x5f1csaNaI-left":{"uid":"edge-dPRAteo8GI-dPRAteo8GI-right-x5f1csaNaI-x5f1csaNaI-left","fromNodeId":"dPRAteo8GI","fromHandleId":"dPRAteo8GI-right","toNodeId":"x5f1csaNaI","toHandleId":"x5f1csaNaI-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-x5f1csaNaI-x5f1csaNaI-right-2PiN4vcQvV-2PiN4vcQvV-left":{"uid":"edge-x5f1csaNaI-x5f1csaNaI-right-2PiN4vcQvV-2PiN4vcQvV-left","fromNodeId":"x5f1csaNaI","fromHandleId":"x5f1csaNaI-right","toNodeId":"2PiN4vcQvV","toHandleId":"2PiN4vcQvV-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}}}}}}